from abc import ABC
from datetime import datetime

def dt2str(dt: datetime) -> str: ...
def str2dt(s: str) -> datetime: ...

class Entity(ABC):
    def __init__(
        self, uid: str = ..., created: datetime = ..., edited: datetime = ...
    ) -> None: ...
    @property
    def uid(self) -> str: ...
    @property
    def created(self) -> datetime: ...
    @property
    def edited(self) -> datetime: ...
    @edited.setter
    def edited(self, value: datetime) -> None: ...
    def created_str(self) -> str: ...
    def edited_str(self) -> str: ...
    def is_edited(self) -> bool: ...

class Comment(Entity):
    author: str
    title: str
    content: str
    def __init__(
        self,
        uid: str = ...,
        author: str = "",
        title: str = "",
        content: str = "",
        created: datetime = ...,
        edited: datetime = ...,
    ) -> None: ...

class TagManager:
    TAGS: dict[str, int]
    @classmethod
    def encode_tags(cls, tag_list: list[str]) -> bytes: ...
    @classmethod
    def decode_tags(cls, tag_bytes: bytes) -> list[str]: ...
    @classmethod
    def has_tag(cls, tag_bytes: bytes, tag: str) -> bool: ...
    @classmethod
    def add_tag(cls, tag_bytes: bytes, tag: str) -> bytes: ...
    @classmethod
    def remove_tag(cls, tag_bytes: bytes, tag: str) -> bytes: ...
    @classmethod
    def list_available_tags(cls) -> list[str]: ...

class Post(Entity):
    comments: list[Comment]
    def __init__(
        self,
        uid: str = ...,
        title: str = "",
        content: str = "",
        tags: bytes = ...,
        created: datetime = ...,
        modified: datetime = ...,
        comments: list[Comment] = [],
    ) -> None: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> None: ...
    @property
    def content(self) -> str: ...
    @content.setter
    def content(self, value: str) -> None: ...
    @property
    def tags(self) -> bytes: ...
    @tags.setter
    def tags(self, value: bytes) -> None: ...
    def tags_str(self) -> str: ...
