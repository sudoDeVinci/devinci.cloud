import abc
from abc import ABC, abstractmethod
from server.db.entities import Comment, Entity, Post
from typing import Generic, TypeVar, List

Ent = TypeVar("Ent", bound=Entity)

class Service(ABC, Generic[Ent], metaclass=abc.ABCMeta):
    @abstractmethod
    def insert(**kwargs) -> None: ...
    @abstractmethod
    def get(**kwargs) -> Ent | None: ...
    @abstractmethod
    def list(**kwargs) -> List[Ent]: ...
    @abstractmethod
    def update(**kwargs) -> None: ...
    @abstractmethod
    def delete(**kwargs) -> None: ...

class CommentService(Service):
    @staticmethod
    def get(**kwargs) -> Comment | None: ...
    @staticmethod
    def list(**kwargs) -> List[Comment]: ...
    @staticmethod
    def insert(**kwargs) -> None: ...
    @staticmethod
    def insert_batch(**kwargs) -> None: ...
    @staticmethod
    def update(**kwargs) -> None: ...
    @staticmethod
    def delete(**kwargs) -> None: ...

class PostService(Service, metaclass=abc.ABCMeta):
    @staticmethod
    def list(**kwargs) -> List[Post]: ...
    @staticmethod
    def insert(**kwargs) -> None: ...
    @staticmethod
    def get_by_date(**kwargs) -> List[Post]: ...
    @staticmethod
    def get_by_daterange(**kwargs) -> List[Post]: ...
